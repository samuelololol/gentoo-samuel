diff -urNp old/include/synaptics-properties.h 3f/include/synaptics-properties.h
--- old/include/synaptics-properties.h	2014-09-10 14:16:39.000000000 +0800
+++ 3f/include/synaptics-properties.h	2015-05-29 03:33:00.065182088 +0800
@@ -158,4 +158,10 @@
 /* 32 Bit Integer, 2 values, horizontal hysteresis, vertical hysteresis */
 #define SYNAPTICS_PROP_NOISE_CANCELLATION "Synaptics Noise Cancellation"
 
+/* 32 bit */
+#define SYNAPTICS_PROP_THREE_FINGER_LOCKED_DRAGS_DELAY "Synaptics Three-Finger Drags Delay"
+
+/* 32 bit */
+#define SYNAPTICS_PROP_THREE_FINGER_LOCKED_DRAGS_TIMEOUT "Synaptics Three-Finger Drags Timeout"
+
 #endif                          /* _SYNAPTICS_PROPERTIES_H_ */
diff -urNp old/src/synaptics.c 3f/src/synaptics.c
--- old/src/synaptics.c	2014-09-18 05:39:51.000000000 +0800
+++ 3f/src/synaptics.c	2015-05-29 03:33:00.179182094 +0800
@@ -769,6 +769,8 @@ set_default_parameters(InputInfoPtr pInf
         xf86SetIntOption(opts, "HorizResolution", horizResolution);
     pars->resolution_vert =
         xf86SetIntOption(opts, "VertResolution", vertResolution);
+    pars->three_finger_drag_delay =
+        xf86SetIntOption(opts, "ThreeFingerDragDelay", 170);
     if (pars->resolution_horiz <= 0) {
         xf86IDrvMsg(pInfo, X_ERROR,
                     "Invalid X resolution, using 1 instead.\n");
@@ -1070,6 +1072,8 @@ SynapticsReset(SynapticsPrivate * priv)
 
     for (i = 0; i < priv->num_slots; i++)
         priv->open_slots[i] = -1;
+    priv->three_finger_drag_on = FALSE;
+    priv->has_seen_two_finger_scroll = FALSE;
 }
 
 static int
@@ -1898,6 +1902,7 @@ SetTapState(SynapticsPrivate * priv, enu
     case TS_START:
         priv->tap_button_state = TBS_BUTTON_UP;
         priv->tap_max_fingers = 0;
+        priv->has_seen_two_finger_scroll = FALSE;
         break;
     case TS_1:
         priv->tap_button_state = TBS_BUTTON_UP;
@@ -1912,7 +1917,7 @@ SetTapState(SynapticsPrivate * priv, enu
         priv->tap_button_state = TBS_BUTTON_DOWN;
         break;
     case TS_SINGLETAP:
-	priv->tap_button_state = TBS_BUTTON_DOWN;
+        priv->tap_button_state = TBS_BUTTON_DOWN;
         priv->touch_on.millis = millis;
         break;
     default:
@@ -1950,13 +1955,16 @@ GetTimeOut(SynapticsPrivate * priv)
         return para->tap_time_2;
     case TS_4:
         return para->locked_drag_time;
+    case TS_3FINGER_START:
+        return para->three_finger_drag_delay;
     default:
         return -1;              /* No timeout */
     }
 }
 
 static int
-HandleTapProcessing(SynapticsPrivate * priv, struct SynapticsHwState *hw,
+/*HandleTapProcessing(SynapticsPrivate * priv, struct SynapticsHwState *hw,*/
+HandleTapProcessing(InputInfoPtr pInfo, SynapticsPrivate * priv, struct SynapticsHwState *hw,
                     CARD32 now, enum FingerState finger,
                     Bool inside_active_area)
 {
@@ -1972,13 +1980,20 @@ HandleTapProcessing(SynapticsPrivate * p
 
     touch = finger >= FS_TOUCHED && priv->finger_state == FS_UNTOUCHED;
     release = finger == FS_UNTOUCHED && priv->finger_state >= FS_TOUCHED;
+    int is_scroll = (priv->horiz_scroll_twofinger_on ||
+                     priv->vert_scroll_twofinger_on) &&
+                    (priv->tap_max_fingers == 2);
+    int exceed_bounds = ((abs(hw->x - priv->touch_on.x) >= para->tap_move) ||
+                         (abs(hw->y - priv->touch_on.y) >= para->tap_move));
     move = (finger >= FS_TOUCHED &&
+            (!is_scroll || (is_scroll && priv->three_finger_drag_on==TRUE)) && exceed_bounds);
+           /*
             (priv->tap_max_fingers <=
              ((priv->horiz_scroll_twofinger_on ||
                priv->vert_scroll_twofinger_on) ? 2 : 1)) &&
             (priv->prevFingers == hw->numFingers &&
              ((abs(hw->x - priv->touch_on.x) >= para->tap_move) ||
-              (abs(hw->y - priv->touch_on.y) >= para->tap_move))));
+              (abs(hw->y - priv->touch_on.y) >= para->tap_move))));*/
     press = (hw->left || hw->right || hw->middle);
 
     if (touch) {
@@ -1999,15 +2014,70 @@ HandleTapProcessing(SynapticsPrivate * p
  restart:
     switch (priv->tap_state) {
     case TS_START:
-        if (touch)
-            SetTapState(priv, TS_1, now);
+        if (touch) {
+            if(hw->numFingers == 3) SetTapState(priv, TS_DRAG, now);
+            else SetTapState(priv, TS_1, now);
+        }
         break;
-    case TS_1:
+    case TS_3FINGER_START:
         if (para->clickpad && press) {
             SetTapState(priv, TS_CLICKPAD_MOVE, now);
             goto restart;
         }
-        if (move) {
+
+        /*if (move) {
+            SetMovingState(priv, MS_TOUCHPAD_RELATIVE, now);
+            SetTapState(priv, TS_MOVE, now);
+            goto restart;
+        }*/
+
+
+        if (is_timeout) {
+                /*
+                 * The user has touched for more than the threshold,
+                 * begin dragging
+                 *
+                 * To achieve 3-finger dragging, we must make up for all the
+                 * side effects that would have been caused by the usual
+                 * single-finger dragging execution path.
+                 *
+                 * The usual "drag" path is:
+                 * TS_START ---> TS_1 ----> TS_2A ----> TS_3 ----> TS_DRAG
+                 */
+                SetMovingState(priv, MS_TOUCHPAD_RELATIVE, now);
+                SetTapState(priv, TS_DRAG, now);
+                priv->tap_button_state = TBS_BUTTON_DOWN;
+                priv->tap_button = 1;  // to post a "Left Button pressed" event
+                priv->three_finger_drag_on = TRUE;
+                break;
+        }
+        if (release) {
+            edge = edge_detection(priv, priv->touch_on.x, priv->touch_on.y);
+            SelectTapButton(priv, edge);
+            /* Disable taps outside of the active area */
+            if (!inside_active_area) {
+                priv->tap_button = 0;
+            }
+            SetTapState(priv, TS_2A, now);
+            break;
+        }
+        break;
+
+    case TS_1:
+        if (para->clickpad && press) {
+            SetTapState(priv, TS_CLICKPAD_MOVE, now);
+             goto restart;
+         }
+        /* Two finger scolling: the deltas would be set to zero,
+         * but it is better if we also prevent the state from
+         * entering MOVE ?
+        */
+        if ((para->scroll_twofinger_vert ||
+             para->scroll_twofinger_horiz ) &&
+            exceed_bounds && priv->tap_max_fingers == 2) {
+            priv->has_seen_two_finger_scroll = TRUE;
+        }
+        if (move)  {
             SetMovingState(priv, MS_TOUCHPAD_RELATIVE, now);
             SetTapState(priv, TS_MOVE, now);
             goto restart;
@@ -2023,7 +2093,7 @@ HandleTapProcessing(SynapticsPrivate * p
             edge = edge_detection(priv, priv->touch_on.x, priv->touch_on.y);
             SelectTapButton(priv, edge);
             /* Disable taps outside of the active area */
-            if (!inside_active_area) {
+            if (!inside_active_area || (priv->has_seen_two_finger_scroll == TRUE)) {
                 priv->tap_button = 0;
             }
             SetTapState(priv, TS_2A, now);
@@ -2034,6 +2104,22 @@ HandleTapProcessing(SynapticsPrivate * p
             SetTapState(priv, TS_CLICKPAD_MOVE, now);
             goto restart;
         }
+        else if (hw->numFingers == 3) {
+            /* When the user suddenly touches with a finger
+             * enter TS_DRAG immediately
+             */
+            SetMovingState(priv, MS_TOUCHPAD_RELATIVE, now);
+            SetTapState(priv, TS_DRAG, now);
+            if( priv->three_finger_drag_on == FALSE) {
+                priv->tap_button_state = TBS_BUTTON_DOWN;
+                priv->tap_button = 1;  /* to post a "Left Button pressed" event */
+                priv->three_finger_drag_on = TRUE;
+            }
+            priv->touch_on.millis = now; /* Since touch will not be set to TRUE 
+                                          * in this case, we need to set it manually
+                                          */
+            break;
+        }
         if (release) {
             SetMovingState(priv, MS_FALSE, now);
             SetTapState(priv, TS_START, now);
@@ -2092,14 +2178,49 @@ HandleTapProcessing(SynapticsPrivate * p
             SetTapState(priv, TS_CLICKPAD_MOVE, now);
             goto restart;
         }
-        if (move)
+        if (priv->three_finger_drag_on == TRUE &&
+            hw->numFingers == 3) {
+            priv->three_finger_last_millis = now;
+        }
+
+        Bool should_stop = FALSE;
+
+        if (priv->three_finger_drag_on == TRUE &&
+            hw->numFingers < 3) {
+            if(para->locked_drags) { 
+                /* Give users the chance to put 3
+                 * fingers onto the trackpad
+                 */
+                if (priv->three_finger_last_millis +
+                        para->locked_drag_time < now)
+                    should_stop = TRUE;
+            } else {
+                should_stop = TRUE;
+            }
+        }
+        if (should_stop == TRUE) {
+            /* 1 or 2 fingers left the trackpad
+             * during a 3-finger drag
+             * when locked drags is not enabled:
+             * finish the drag
+             */
             SetMovingState(priv, MS_TOUCHPAD_RELATIVE, now);
+            SetTapState(priv, TS_MOVE, now);
+            priv->three_finger_drag_on = FALSE;
+            priv->tap_button = 1;
+            priv->tap_button_state = TBS_BUTTON_UP;
+            break;
+        }
+        if (move)
+              SetMovingState(priv, MS_TOUCHPAD_RELATIVE, now);
         if (release) {
             SetMovingState(priv, MS_FALSE, now);
             if (para->locked_drags) {
                 SetTapState(priv, TS_4, now);
             }
             else {
+                if (priv->three_finger_drag_on == TRUE)  /* To release button 1 */
+                    priv->tap_button = 1; 
                 SetTapState(priv, TS_START, now);
             }
         }
@@ -2107,6 +2228,9 @@ HandleTapProcessing(SynapticsPrivate * p
     case TS_4:
         if (is_timeout) {
             SetTapState(priv, TS_START, now);
+            if (priv->three_finger_drag_on == TRUE) {
+                priv->three_finger_drag_on = FALSE;
+            }
             goto restart;
         }
         if (touch)
@@ -2120,6 +2244,9 @@ HandleTapProcessing(SynapticsPrivate * p
         else if (release) {
             SetMovingState(priv, MS_FALSE, now);
             SetTapState(priv, TS_START, now);
+            if (priv->three_finger_drag_on == TRUE) {
+                priv->three_finger_drag_on = FALSE;
+            }
         }
         break;
     case TS_CLICKPAD_MOVE:
@@ -2130,14 +2257,27 @@ HandleTapProcessing(SynapticsPrivate * p
         priv->horiz_scroll_twofinger_on = FALSE;
 
         /* Assume one touch is only for holding the clickpad button down */
+        /* If we want to do a 3-finger clickpad drag, we have to set the
+           numFingers to 1 in order to enable the moving after the click,
+           otherwise numFingers will be 2 and the gesture will be
+           considered as 2-finger scrolling, and the pointer will not
+           move. */
         if (hw->numFingers > 1)
-            hw->numFingers--;
+            hw->numFingers = 1; 
         SetMovingState(priv, MS_TOUCHPAD_RELATIVE, now);
         if (!press) {
             SetMovingState(priv, MS_FALSE, now);
             SetTapState(priv, TS_MOVE, now);
             priv->count_packet_finger = 0;
         }
+        /* If we are in a three finger drag, finish it
+           by setting the tap button to 1 and let the
+           outer code handle the "up" event of button 1 */
+        if (priv->three_finger_drag_on == TRUE) {
+            priv->three_finger_drag_on = FALSE;
+            priv->tap_button = 1;
+            priv->tap_button_state = TBS_BUTTON_UP;
+        }
         break;
     }
 
@@ -2385,7 +2525,8 @@ HandleScrolling(SynapticsPrivate * priv,
 
     if (priv->synpara.touchpad_off == TOUCHPAD_TAP_OFF ||
         priv->synpara.touchpad_off == TOUCHPAD_OFF ||
-        priv->finger_state == FS_BLOCKED) {
+        priv->finger_state == FS_BLOCKED ||
+        priv->three_finger_drag_on == TRUE) {
         stop_coasting(priv);
         priv->circ_scroll_on = FALSE;
         priv->vert_scroll_edge_on = FALSE;
@@ -3174,7 +3315,7 @@ HandleState(InputInfoPtr pInfo, struct S
 
     /* tap and drag detection. Needs to be performed even if the finger is in
      * the dead area to reset the state. */
-    timeleft = HandleTapProcessing(priv, hw, now, finger, inside_active_area);
+    timeleft = HandleTapProcessing(pInfo, priv, hw, now, finger, inside_active_area);
     if (timeleft > 0)
         delay = MIN(delay, timeleft);
 
diff -urNp old/src/synapticsstr.h 3f/src/synapticsstr.h
--- old/src/synapticsstr.h	2014-09-18 05:39:51.000000000 +0800
+++ 3f/src/synapticsstr.h	2015-05-29 03:33:00.158182093 +0800
@@ -132,6 +132,8 @@ enum TapState {
     TS_4,                       /* After release when "locked drags" enabled */
     TS_5,                       /* After touch when "locked drags" enabled */
     TS_CLICKPAD_MOVE,           /* After left button press on a clickpad */
+
+    TS_3FINGER_START,           /* After the first touch which is also a 3-finger touch */
 };
 
 enum TapButtonState {
@@ -226,6 +228,10 @@ typedef struct _SynapticsParameters {
     int area_left_edge, area_right_edge, area_top_edge, area_bottom_edge;       /* area coordinates absolute */
     int softbutton_areas[4][4]; /* soft button area coordinates, 0 => right, 1 => middle , 2 => secondary right, 3 => secondary middle button */
     int hyst_x, hyst_y;         /* x and y width of hysteresis box */
+
+    int three_finger_drag_delay;        /* The time that must elapse before 
+                                         * transitioning from a 3-finger touch
+                                         * to a 3-finger drag */
 } SynapticsParameters;
 
 struct _SynapticsPrivateRec {
@@ -274,6 +280,16 @@ struct _SynapticsPrivateRec {
     int tap_button;             /* Which button started the tap processing */
     enum TapButtonState tap_button_state;       /* Current tap action */
     SynapticsMoveHistRec touch_on;      /* data when the touchpad is touched/released */
+    CARD32 three_finger_last_millis;    /* Last timestamp when 3 fingers are on the trackpad
+                                           in a 3-finger drag. It is possible to continue
+                                           dragging using 1 or 2 fingers within the
+                                           LockedDragTimeout limit after this time
+                                           step for compatibility with the existing state
+                                           transitions. However if we're in a 3-finger drag
+                                           the user is only supposed to prolong the drag
+                                           only with 3 fingers but not 1 or 2.
+                                           This is why we need to keep track of this timestamp. */
+
 
     enum MovingState moving_state;      /* previous moving state */
     Bool vert_scroll_edge_on;   /* Keeps track of currently active scroll modes */
@@ -283,6 +299,10 @@ struct _SynapticsPrivateRec {
     Bool circ_scroll_on;        /* Keeps track of currently active scroll modes */
     Bool circ_scroll_vert;      /* True: Generate vertical scroll events
                                    False: Generate horizontal events */
+    Bool three_finger_drag_on;  /* Whether we're in the midst of a 3-finger drag */
+    Bool has_seen_two_finger_scroll; /* Whether we've seen a two-finger scroll 
+                                      * in the current state transition loop */
+
     double frac_x, frac_y;      /* absolute -> relative fraction */
     enum MidButtonEmulation mid_emu_state;      /* emulated 3rd button */
     int repeatButtons;          /* buttons for repeat */
